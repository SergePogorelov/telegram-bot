
import os
import time
import requests
import redis
from dotenv import load_dotenv


load_dotenv()


PRACTICUM_TOKEN = os.getenv("PRACTICUM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')


r = redis.StrictRedis()
if os.getenv('HEROKU'):
    r = redis.from_url(os.environ.get("REDIS_URL"))


def parse_homework_status(homework):
    homework_name = homework["lesson_name"]
    if homework["status"] == "rejected":
        verdict = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–ª–∏—Å—å –æ—à–∏–±–∫–∏."
    else:
        verdict = "–†–µ–≤—å—é–µ—Ä—É –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É."
        r.srem('job_hw_check', TELEGRAM_CHAT_ID)
    return f'–£ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ä–∞–±–æ—Ç—É\n"_{homework_name}_"!\n\n*{verdict}*'


def check_homework_statuses(context):
    current_timestamp = context.job.context
    headers = {"Authorization": f"OAuth {PRACTICUM_TOKEN}"}
    params = {"from_date": current_timestamp}
    homework_statuses = requests.get("https://praktikum.yandex.ru/api/user_api/homework_statuses/", headers=headers, params=params)
    try:
        homework_statuses.raise_for_status()
    except requests.exceptions.HTTPError:
        context.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text='Request Error')
        return

    homeworks = homework_statuses.json().get("homeworks")
    current_date = homework_statuses.json().get("current_date")

    if homeworks:
        context.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=parse_homework_status(homeworks[0]), parse_mode='Markdown')
        if current_date:
            context.job.context = homework_statuses.json().get("current_date")


def hw(update, context):
    if update.effective_chat.id == int(TELEGRAM_CHAT_ID):
        current_timestamp = int(time.time()) 

        if context.args:
            try:
                arg = int(context.args[0])
            except (ValueError):
                update.message.reply_text('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ "/hw <—á–∞—Å—ã>"')
                return

            current_timestamp = current_timestamp - arg*60*60
            if current_timestamp < 0:
                update.message.reply_text('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –º—ã –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ! :)')
                return

        job = context.job_queue.get_jobs_by_name(name='job_hw_check')
        if not job or job[0].removed:
            context.job_queue.run_repeating(check_homework_statuses, name='job_hw_check', interval=300, first=0, context=current_timestamp)
            r.sadd('job_hw_check', TELEGRAM_CHAT_ID)
            update.message.reply_text('*–ü–æ—à–µ–ª —É–∑–Ω–∞–≤–∞—Ç—å!*\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–≤–æ—é –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≤–µ—Ä—è—Ç, —Å–æ–æ–±—â—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç.', parse_mode='Markdown')
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text='*–ü–æ–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏* üòí \n–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–≤–æ—é –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≤–µ—Ä—è—Ç, —Å–æ–æ–±—â—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç.', parse_mode='Markdown')

    else: 
        context.bot.send_message(chat_id=update.effective_chat.id, text="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /caps")

def hws(update, context):
    job = context.job_queue.get_jobs_by_name(name='job_hw_check')
    if not job or job[0].removed:
        update.message.reply_text('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏:\n"/hw <—á–∞—Å—ã>"')
    else:
        job[0].schedule_removal()
        r.srem('job_hw_check', TELEGRAM_CHAT_ID)
        context.bot.send_message(chat_id=update.effective_chat.id, text='*–û—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞*.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏:\n"/hw <—á–∞—Å—ã>"', parse_mode='Markdown')


if __name__ == "__main__":
    from bot import main
    main()
